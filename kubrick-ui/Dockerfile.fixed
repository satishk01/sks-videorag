FROM node:18-alpine AS builder

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache python3 make g++ git

# Set environment variables
ENV NODE_OPTIONS="--max-old-space-size=1536"
ENV NODE_ENV="production"
ENV GENERATE_SOURCEMAP="false"

# Copy package files
COPY package*.json ./

# Install dependencies with retries
RUN npm install --verbose --legacy-peer-deps || \
    (echo "Retrying npm install..." && npm install --force) || \
    (echo "Final attempt with yarn..." && npm install -g yarn && yarn install)

# Copy source code
COPY . .

# Build the application
RUN npm run build || \
    (echo "Build failed, trying with increased memory..." && \
     NODE_OPTIONS="--max-old-space-size=2048" npm run build) || \
    (echo "Trying alternative build..." && \
     npx vite build --mode production --outDir dist)

# Verify build
RUN ls -la dist/ && test -f dist/index.html

# Production stage
FROM nginx:alpine

# Copy nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built app
COPY --from=builder /app/dist /usr/share/nginx/html

# Create a simple health check
RUN echo '#!/bin/sh' > /healthcheck.sh && \
    echo 'curl -f http://localhost:3000/ || exit 1' >> /healthcheck.sh && \
    chmod +x /healthcheck.sh

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /healthcheck.sh

CMD ["nginx", "-g", "daemon off;"]