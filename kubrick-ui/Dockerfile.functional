FROM nginx:alpine

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create functional web interface with upload and chat
RUN mkdir -p /usr/share/nginx/html

# Create the main HTML file
COPY <<'EOF' /usr/share/nginx/html/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kubrick AI - Video Analysis</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        .content {
            padding: 30px;
        }
        .section {
            margin-bottom: 30px;
            padding: 20px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
        }
        .section h2 {
            color: #2c3e50;
            margin-bottom: 15px;
            border-bottom: 2px solid #007bff;
            padding-bottom: 5px;
        }
        .upload-area {
            border: 2px dashed #007bff;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            background: #f8f9fa;
            cursor: pointer;
            transition: all 0.3s;
        }
        .upload-area:hover {
            background: #e9ecef;
            border-color: #0056b3;
        }
        .upload-area.dragover {
            background: #cce5ff;
            border-color: #0056b3;
        }
        input[type="file"] {
            display: none;
        }
        .btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
            transition: background 0.3s;
        }
        .btn:hover {
            background: #0056b3;
        }
        .btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        .chat-container {
            border: 1px solid #dee2e6;
            border-radius: 10px;
            height: 400px;
            display: flex;
            flex-direction: column;
        }
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 10px;
            max-width: 80%;
        }
        .message.user {
            background: #007bff;
            color: white;
            margin-left: auto;
        }
        .message.assistant {
            background: white;
            border: 1px solid #dee2e6;
        }
        .chat-input {
            display: flex;
            padding: 20px;
            border-top: 1px solid #dee2e6;
        }
        .chat-input input {
            flex: 1;
            padding: 12px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            margin-right: 10px;
        }
        .status {
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
        .status.success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .status.error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .status.info {
            background: #cce5ff;
            border: 1px solid #99d3ff;
            color: #004085;
        }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .video-info {
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé¨ Kubrick AI</h1>
            <p>Video Analysis with AWS Bedrock Claude 3.5 Sonnet v2</p>
        </div>
        
        <div class="content">
            <!-- Video Upload Section -->
            <div class="section">
                <h2>üì§ Upload Video</h2>
                <div class="upload-area" onclick="document.getElementById('videoFile').click()">
                    <div id="uploadText">
                        <h3>üé• Click to upload or drag & drop video</h3>
                        <p>Supported formats: MP4, AVI, MOV, WebM</p>
                    </div>
                </div>
                <input type="file" id="videoFile" accept="video/*">
                <button class="btn" onclick="uploadVideo()" id="uploadBtn" disabled>Upload Video</button>
                <div id="uploadStatus"></div>
                <div id="videoInfo"></div>
            </div>

            <!-- Chat Section -->
            <div class="section">
                <h2>üí¨ Chat with AI</h2>
                <div class="chat-container">
                    <div class="chat-messages" id="chatMessages">
                        <div class="message assistant">
                            <strong>Kubrick AI:</strong> Hello! Upload a video and I'll help you analyze it. You can ask me questions about what happens in the video, search for specific scenes, or get summaries.
                        </div>
                    </div>
                    <div class="chat-input">
                        <input type="text" id="messageInput" placeholder="Ask me about the video..." disabled>
                        <button class="btn" onclick="sendMessage()" id="sendBtn" disabled>Send</button>
                    </div>
                </div>
            </div>

            <!-- API Links -->
            <div class="section">
                <h2>üîó Direct API Access</h2>
                <a href="/docs" class="btn" target="_blank">üìö API Documentation</a>
                <a href="/" class="btn" target="_blank">üîç Health Check</a>
            </div>
        </div>
    </div>

    <script>
        let currentVideoPath = null;
        const API_BASE = window.location.protocol + '//' + window.location.hostname + ':8080';

        // File upload handling
        const fileInput = document.getElementById('videoFile');
        const uploadArea = document.querySelector('.upload-area');
        
        fileInput.addEventListener('change', handleFileSelect);
        
        // Drag and drop
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });
        
        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });
        
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                fileInput.files = files;
                handleFileSelect();
            }
        });

        function handleFileSelect() {
            const file = fileInput.files[0];
            if (file) {
                document.getElementById('uploadBtn').disabled = false;
                document.getElementById('uploadText').innerHTML = `
                    <h3>‚úÖ ${file.name}</h3>
                    <p>Size: ${(file.size / 1024 / 1024).toFixed(2)} MB</p>
                `;
            }
        }

        async function uploadVideo() {
            const file = fileInput.files[0];
            if (!file) return;

            const uploadBtn = document.getElementById('uploadBtn');
            const uploadStatus = document.getElementById('uploadStatus');
            
            uploadBtn.disabled = true;
            uploadBtn.innerHTML = '<div class="loading"></div> Uploading...';
            
            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch(`${API_BASE}/upload-video`, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (response.ok) {
                    currentVideoPath = result.video_path;
                    uploadStatus.innerHTML = '<div class="status success">‚úÖ Video uploaded successfully!</div>';
                    document.getElementById('videoInfo').innerHTML = `
                        <div class="video-info">
                            <strong>üìÅ Video Path:</strong> ${result.video_path}<br>
                            <strong>üìä Status:</strong> Ready for processing
                        </div>
                    `;
                    
                    // Enable chat
                    document.getElementById('messageInput').disabled = false;
                    document.getElementById('sendBtn').disabled = false;
                    
                    // Process video
                    processVideo(result.video_path);
                } else {
                    uploadStatus.innerHTML = `<div class="status error">‚ùå Upload failed: ${result.detail}</div>`;
                }
            } catch (error) {
                uploadStatus.innerHTML = `<div class="status error">‚ùå Upload error: ${error.message}</div>`;
            }
            
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = 'Upload Video';
        }

        async function processVideo(videoPath) {
            const uploadStatus = document.getElementById('uploadStatus');
            uploadStatus.innerHTML += '<div class="status info"><div class="loading"></div> Processing video for AI analysis...</div>';

            try {
                const response = await fetch(`${API_BASE}/process-video`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ video_path: videoPath })
                });

                const result = await response.json();
                
                if (response.ok) {
                    uploadStatus.innerHTML += '<div class="status success">‚úÖ Video processed and ready for AI analysis!</div>';
                } else {
                    uploadStatus.innerHTML += `<div class="status error">‚ö†Ô∏è Processing queued: ${result.message}</div>`;
                }
            } catch (error) {
                uploadStatus.innerHTML += `<div class="status error">‚ö†Ô∏è Processing error: ${error.message}</div>`;
            }
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message || !currentVideoPath) return;

            const chatMessages = document.getElementById('chatMessages');
            
            // Add user message
            chatMessages.innerHTML += `
                <div class="message user">
                    <strong>You:</strong> ${message}
                </div>
            `;
            
            // Add loading message
            const loadingId = 'loading-' + Date.now();
            chatMessages.innerHTML += `
                <div class="message assistant" id="${loadingId}">
                    <div class="loading"></div> Thinking...
                </div>
            `;
            
            messageInput.value = '';
            chatMessages.scrollTop = chatMessages.scrollHeight;

            try {
                const response = await fetch(`${API_BASE}/chat`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: message,
                        video_path: currentVideoPath
                    })
                });

                const result = await response.json();
                
                // Remove loading message
                document.getElementById(loadingId).remove();
                
                if (response.ok) {
                    chatMessages.innerHTML += `
                        <div class="message assistant">
                            <strong>Kubrick AI:</strong> ${result.message}
                        </div>
                    `;
                } else {
                    chatMessages.innerHTML += `
                        <div class="message assistant">
                            <strong>Error:</strong> ${result.detail || 'Something went wrong'}
                        </div>
                    `;
                }
            } catch (error) {
                document.getElementById(loadingId).remove();
                chatMessages.innerHTML += `
                    <div class="message assistant">
                        <strong>Error:</strong> ${error.message}
                    </div>
                `;
            }
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Enter key to send message
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Check API status on load
        fetch(`${API_BASE}/`)
            .then(response => {
                if (response.ok) {
                    console.log('‚úÖ API connection successful');
                } else {
                    console.log('‚ö†Ô∏è API connection issues');
                }
            })
            .catch(error => {
                console.log('‚ùå API not accessible:', error);
            });
    </script>
</body>
</html>
EOF

EXPOSE 3000

CMD ["nginx", "-g", "daemon off;"]